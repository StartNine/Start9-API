<plex:PlexWindow x:Class="FrontEndTest.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FrontEndTest"
        xmlns:plex="clr-namespace:Start9.Api.Plex;assembly=Start9.Api"
        xmlns:obj="clr-namespace:Start9.Api.Objects;assembly=Start9.Api"
        xmlns:apictrl="clr-namespace:Start9.Api.Controls;assembly=Start9.Api"
        xmlns:disk="clr-namespace:Start9.Api.DiskItems;assembly=Start9.Api"
        xmlns:api="clr-namespace:Start9.Api;assembly=Start9.Api"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        mc:Ignorable="d"
        Title="MainWindow" Width="640" Height="350" Style="{DynamicResource AeroMediaWindowStyle}">
    <plex:PlexWindow.Background>
        <SolidColorBrush Opacity="0" Color="Transparent"/>
    </plex:PlexWindow.Background>
    <plex:PlexWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Start9.Api;component/Themes/Plex.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Start9.Api;component/Themes/AeroLonghorn.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <!--obj:ImageBrushNineGridConverter x:Key="ImageBrushNineGridConverter"/>
            <ImageBrush x:Key="TestImageBrush"/>
            <obj:CutCornerGeometryConverter x:Key="CutCornerGeometryConverter"/-->
            <!--local:ReplacementIconNameToReplacedCanvasConverter x:Key="ReplacementIconNameToReplacedCanvasConverter"/-->
            <local:ReplacementIconNameToOriginalCanvasConverter x:Key="ReplacementIconNameToOriginalCanvasConverter"/>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <obj:WidthToHalfWidthConverter x:Key="WidthToHalfWidthConverter"/>

            <DataTemplate x:Key="DiskItemTemplate" DataType="{x:Type disk:DiskItem}">
                <TreeViewItem ItemsSource="{Binding SubItems}" ItemTemplate="{DynamicResource DiskItemTemplate}">
                    <TreeViewItem.Header>
                        <DockPanel Margin="0,2">
                            <Canvas Width="16" Height="16" DockPanel.Dock="Left">
                                <Canvas.Background>
                                    <Binding ConverterParameter="16">
                                        <Binding.Converter>
                                            <disk:DiskItemToIconImageBrushConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Canvas.Background>
                            </Canvas>
                            <TextBlock Text="{Binding ItemName}"/>
                        </DockPanel>
                    </TreeViewItem.Header>
                </TreeViewItem>
            </DataTemplate>

            <QuinticEase x:Key="TileScalingEase" EasingMode="EaseOut"/>

            <Style x:Key="TileStyle" TargetType="{x:Type apictrl:IconButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type apictrl:IconButton}">
                            <Grid>
                                <apictrl:Planerator x:Name="Rotator" UseLayoutRounding="True">
                                    <Grid HorizontalAlignment="Stretch" Background="#01000000">
                                        <Grid x:Name="ScaleGrid" RenderTransformOrigin="0.5,0.5">
                                            <Grid.RenderTransform>
                                                <ScaleTransform x:Name="Scaler"/>
                                            </Grid.RenderTransform>
                                            <Canvas x:Name="HoverBackground" Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#FF555555" Visibility="Hidden"/>
                                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding Background}" BorderThickness="1" Margin="4">
                                                <Grid x:Name="ContentRoot">
                                                    <Grid.Background>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                            <LinearGradientBrush.GradientStops>
                                                                <GradientStop Offset="0" Color="#40000000"/>
                                                                <GradientStop Offset="1" Color="#20000000"/>
                                                            </LinearGradientBrush.GradientStops>
                                                        </LinearGradientBrush>
                                                    </Grid.Background>
                                                    <ContentPresenter x:Name="TitleControl" Content="{TemplateBinding Content}" Margin="16,8" Focusable="False" Opacity="1" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                                                    <ContentPresenter x:Name="IconControl" Content="{TemplateBinding Icon}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="56" Height="56" Focusable="False" />
                                                </Grid>
                                            </Border>
                                        </Grid>
                                    </Grid>
                                </apictrl:Planerator>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Rotator" Storyboard.TargetProperty="RotationX" To="3.0625" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Rotator" Storyboard.TargetProperty="RotationX" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True"/>
                                        <Condition Property="Width" Value="64"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="0.975" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="0.975" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True"/>
                                        <Condition Property="Width" Value="128"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="0.975" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="0.975" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True"/>
                                        <Condition Property="Width" Value="256"/>
                                        <!--Condition Property="Width" Value="128"/-->
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="0.9875" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="0.9875" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                                <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <Trigger Property="Height" Value="256">
                                    <!--Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="0.975" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                        <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="0.975" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                        <DoubleAnimation Storyboard.TargetName="Scaler" Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource TileScalingEase}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions-->
                                    <Setter TargetName="ScaleGrid" Property="RenderTransformOrigin" Value="0.5,0.75"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="ContentRoot" Property="Opacity" Value="0.75"/>
                                </Trigger>
                                <Trigger Property="VerticalContentAlignment" Value="Top">
                                    <Setter TargetName="IconControl" Property="Width" Value="32"/>
                                    <Setter TargetName="IconControl" Property="Height" Value="32"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SmallTileStyle" TargetType="{x:Type apictrl:IconButton}" BasedOn="{StaticResource TileStyle}">
                <Setter Property="Width" Value="64"/>
                <Setter Property="Height" Value="64"/>
                <Setter Property="Foreground" Value="Transparent" />
                <Setter Property="VerticalContentAlignment" Value="Top"/>
            </Style>

            <Style x:Key="MediumTileStyle" TargetType="{x:Type apictrl:IconButton}" BasedOn="{StaticResource TileStyle}">
                <Setter Property="Width" Value="128"/>
                <Setter Property="Height" Value="128"/>
            </Style>

            <Style x:Key="WideTileStyle" TargetType="{x:Type apictrl:IconButton}" BasedOn="{StaticResource TileStyle}">
                <Setter Property="Width" Value="256"/>
                <Setter Property="Height" Value="128"/>
            </Style>

            <Style x:Key="LargeTileStyle" TargetType="{x:Type apictrl:IconButton}" BasedOn="{StaticResource TileStyle}">
                <Setter Property="Width" Value="256"/>
                <Setter Property="Height" Value="256"/>
            </Style>

        </ResourceDictionary>
    </plex:PlexWindow.Resources>
    <plex:PlexWindow.TitleBarContent>
        <Grid Margin="0,10,0,6">
            <Grid.Resources>
                <LinearGradientBrush x:Key="EmbossBrush" StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0" Color="#57000000"/>
                        <GradientStop Offset="1" Color="#6CFFFFFF"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Grid.Resources>
            <Rectangle x:Name="NavButtonBackgroundSizingAid" Fill="Transparent" Stroke="Transparent" StrokeThickness="0"/>
            <Canvas Width="{Binding Width, Source={x:Reference LeftContentGrid}}" HorizontalAlignment="{Binding HorizontalAlignment, Source={x:Reference LeftContentGrid}}" VerticalAlignment="Stretch" Margin="{Binding Margin, Source={x:Reference LeftContentGrid}}" Background="{DynamicResource EmbossBrush}">
                <Canvas.OpacityMask>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid Height="{Binding ActualHeight, Source={x:Reference NavButtonBackgroundSizingAid}}" Width="{Binding Width, Source={x:Reference LeftContentGrid}}" Background="#01000000">
                                <Canvas Height="{Binding Height, Source={x:Reference LeftContentGrid}}" HorizontalAlignment="Stretch" VerticalAlignment="{Binding VerticalAlignment, Source={x:Reference LeftContentGrid}}">
                                    <Canvas.Background>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <Path HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Data="m 14.977306 288.29639 c -1.153129 -0.72767 -2.84795 -0.11682 -4.44122 -0.51366 C 9.3514455 287.48766 8.0382904 285.8921 5.795171 285.88751 3.1471575 285.88257 -2.7194995e-7 287.72089 0 291.44374 c 2.7194999e-7 3.72286 3.1471579 5.56119 5.7951715 5.55625 2.2431192 -0.005 3.5562743 -1.60015 4.7409145 -1.89522 1.59327 -0.39685 3.288091 0.21401 4.44122 -0.51367 1.153129 -0.72766 1.956027 -1.91612 1.956027 -3.14736 0 -1.23122 -0.802898 -2.41969 -1.956027 -3.14735 z" Fill="Black" Stroke="Transparent" StrokeThickness="0"/>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Canvas.Background>
                                </Canvas>
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </Canvas.OpacityMask>
            </Canvas>
            <Grid x:Name="LeftContentGrid" Width="62" Height="42" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="9,0">
                <!--Grid.Background>
                    <LinearGradientBrush StartPoint="0,0.125" EndPoint="0,1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Offset="0" Color="#57000000"/>
                            <GradientStop Offset="1" Color="#6CFFFFFF"/>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Grid.Background-->
                <Button Style="{DynamicResource AeroNavButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0"/>
                <Button Style="{DynamicResource AeroNavButtonStyle}" Width="18" Height="18" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="5,0"/>
            </Grid>
            <!--Canvas Width="{Binding Width, Source={x:Reference RightContentGrid}}" Height="{Binding Height, Source={x:Reference RightContentGrid}}" HorizontalAlignment="{Binding HorizontalAlignment, Source={x:Reference RightContentGrid}}" VerticalAlignment="{Binding VerticalAlignment, Source={x:Reference RightContentGrid}}" Margin="{Binding Margin, Source={x:Reference RightContentGrid}}" Background="{DynamicResource EmbossBrush}"-->
            <Canvas Width="{Binding Width, Source={x:Reference RightContentGrid}}" HorizontalAlignment="{Binding HorizontalAlignment, Source={x:Reference RightContentGrid}}" VerticalAlignment="Stretch" Margin="{Binding Margin, Source={x:Reference RightContentGrid}}" Background="{DynamicResource EmbossBrush}">
                <Canvas.OpacityMask>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid Height="{Binding ActualHeight, Source={x:Reference NavButtonBackgroundSizingAid}}" Width="{Binding Width, Source={x:Reference RightContentGrid}}" Background="#01000000">
                                <Ellipse Height="{Binding Height, Source={x:Reference RightContentGrid}}" VerticalAlignment="{Binding VerticalAlignment, Source={x:Reference RightContentGrid}}" HorizontalAlignment="Stretch" Fill="Black" Stroke="Transparent" StrokeThickness="0"/>
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </Canvas.OpacityMask>
            </Canvas>
            <Grid x:Name="RightContentGrid" Width="42" Height="42" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="9,0">
                <!--Ellipse.Fill>
                        <LinearGradientBrush StartPoint="0,0.125" EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Offset="0" Color="#51020202"/>
                                <GradientStop Offset="1" Color="#C0FFFFFF"/>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Ellipse.Fill>
                    <Ellipse.OpacityMask>
                        <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,0.5">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Offset="1" Color="White"/>
                                <GradientStop Offset="1" Color="Transparent"/>
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </Ellipse.OpacityMask>
                </Ellipse-->
                <Button Style="{DynamicResource AeroNavButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Grid>
        </Grid>
    </plex:PlexWindow.TitleBarContent>
    <plex:PlexWindow.ToolBarContent>
        <Grid>
            <Canvas HorizontalAlignment="Left" Width="32" Height="32" Margin="5,0" Background="{x:Static api:SystemContext.UserAvatar}"/>
            <ToggleButton x:Name="ShowHideRevealToggleButton">Show/Hide Reveal Demo</ToggleButton>
        </Grid>
    </plex:PlexWindow.ToolBarContent>
    <plex:PlexWindow.Content>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <TreeView x:Name="TestTreeView" ItemTemplate="{DynamicResource DiskItemTemplate}" BorderThickness="0" BorderBrush="Transparent" Background="Transparent" Grid.Column="0"/>
            <Grid Grid.Column="1">
                <ListView ItemsSource="{Binding DiskItems}">
                    <ListView.Template>
                        <ControlTemplate>
                            <WrapPanel IsItemsHost="True"/>
                        </ControlTemplate>
                    </ListView.Template>
                    <ListView.ItemTemplate>
                        <DataTemplate DataType="{x:Type disk:DiskItem}">
                            <Grid>
                                <apictrl:IconButton Style="{DynamicResource LargeTileStyle}" Content="{Binding ItemName}">
                                    <apictrl:IconButton.Background>
                                        <SolidColorBrush Color="{Binding ItemAppInfo.Color}"/>
                                    </apictrl:IconButton.Background>
                                    <apictrl:IconButton.Icon>
                                        <Border BorderBrush="Red" BorderThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Canvas Width="48" Height="48">
                                                <Canvas.Background>
                                                    <Binding ConverterParameter="48">
                                                        <Binding.Converter>
                                                            <disk:DiskItemToIconImageBrushConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </Canvas.Background>
                                            </Canvas>
                                        </Border>
                                    </apictrl:IconButton.Icon>
                                </apictrl:IconButton>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <ListView ItemsSource="{Binding ItemAppInfo.LiveText}" Grid.Column="0" Foreground="White">
                                        <ListView.Template>
                                            <ControlTemplate TargetType="ListView">
                                                <StackPanel IsItemsHost="True" Orientation="Vertical"/>
                                            </ControlTemplate>
                                        </ListView.Template>
                                        <ListView.ItemTemplate>
                                            <DataTemplate DataType="string">
                                                <TextBlock>
                                                    <TextBlock.Text>
                                                        <Binding/>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </DataTemplate>
                                        </ListView.ItemTemplate>
                                    </ListView>
                                    <ListView ItemsSource="{Binding ItemAppInfo.LiveImages}" Grid.Column="1">
                                        <ListView.Template>
                                            <ControlTemplate TargetType="ListView">
                                                <WrapPanel IsItemsHost="True"/>
                                            </ControlTemplate>
                                        </ListView.Template>
                                        <ListView.ItemTemplate>
                                            <DataTemplate DataType="ImageBrush">
                                                <Canvas Width="{Binding ImageSource.Width}" Height="{Binding ImageSource.Height}">
                                                    <Canvas.Background>
                                                        <ImageBrush ImageSource="{Binding ImageSource}"/>
                                                    </Canvas.Background>
                                                </Canvas>
                                            </DataTemplate>
                                        </ListView.ItemTemplate>
                                    </ListView>
                                </Grid>
                            </Grid>
                            <!--apictrl:IconButton.Content>
                                    <Grid>
                                        <ContentControl Content="{Binding ItemName}"/>
                                        <ListView x:Name="ImagesListView"/>
                                        <ListView x:Name="StringsListView"/>
                                    </Grid>
                                </apictrl:IconButton.Content>
                            </apictrl:IconButton-->
                            <!--DataTemplate.Triggers-->
                            <!--EventTrigger RoutedEvent="NotificationReceived">
                                    <Setter TargetName="ImagesListView"  Property="ItemsSource" Value="NewNotification.Images"/>
                                </EventTrigger-->
                            <!--/DataTemplate.Triggers-->
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>
            <!--TreeView.ItemTemplate>
                </TreeView.ItemTemplate-->
            <Grid HorizontalAlignment="Right" Width="256" Height="256" VerticalAlignment="Bottom" Margin="64" Background="Black" Grid.ColumnSpan="5" Visibility="{Binding Path=IsChecked, Source={x:Reference ShowHideRevealToggleButton}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Canvas x:Name="RevealDemoSizingAid"/>
                <apictrl:Reveal HoverWidth="1024" HoverHeight="1024">
                    <apictrl:Reveal.Hover>
                        <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Offset="0" Color="#7FFFFFFF"/>
                                <GradientStop Offset="1" Color="Transparent"/>
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </apictrl:Reveal.Hover>
                    <apictrl:Reveal.OpacityMask>
                        <VisualBrush>
                            <VisualBrush.Visual>
                                <Border Width="{Binding ActualWidth, Source={x:Reference RevealDemoSizingAid}}" Height="{Binding ActualHeight, Source={x:Reference RevealDemoSizingAid}}" BorderThickness="5" BorderBrush="Black" Background="Transparent"/>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </apictrl:Reveal.OpacityMask>
                </apictrl:Reveal>
                <TextBlock TextAlignment="Center" VerticalAlignment="Center" Foreground="White">Here, have a Fluent Reveal demo.</TextBlock>
            </Grid>
        </Grid>
    </plex:PlexWindow.Content>
    <!--plex:PlexWindow.Content-->
    <!--Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid x:Name="SizeGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10"/>
                <Canvas  x:Name="Sizer" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <!-Path Fill="#FF7B767A" Stretch="None">
                    <Path.Data>
                        <Binding Converter="{StaticResource CutCornerGeometryConverter}" UpdateSourceTrigger="PropertyChanged" NotifyOnSourceUpdated="True" NotifyOnTargetUpdated="True">
                            <Binding.ConverterParameter>
                                <obj:CutCornerInfo CornerDistance="25,50,75,100" Width="{Binding ActualWidth, Source={x:Reference Name=Sizer}, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}" Height="{Binding ActualHeight, Source={x:Reference Name=Sizer}, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}" />
                            </Binding.ConverterParameter>
                        </Binding>
                    </Path.Data>
                </Path->
                <apictrl:CutCornerBorder Background="Blue" BorderBrush="Red" BorderThickness="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CornerDistance="25,50,75,100">
                    <Canvas Width="100" Height="100" Background="Green"/>
                </apictrl:CutCornerBorder>
            </Grid>
            <StackPanel x:Name="TileTestStackPanel" Grid.Column="1" ScrollViewer.VerticalScrollBarVisibility="Visible">
                <StackPanel.ContextMenu>
                    <apictrl:TouchableContextMenu>
                        <MenuItem Header="Test"/>
                        <MenuItem Header="Test"/>
                        <MenuItem Header="Test"/>
                        <MenuItem Header="Test"/>
                        <MenuItem Header="Sub-item Test">
                            <MenuItem Header="Test"/>
                            <MenuItem Header="Test"/>
                            <MenuItem Header="Test"/>
                        </MenuItem>
                    </apictrl:TouchableContextMenu>
                </StackPanel.ContextMenu>
            </StackPanel>
            <TreeView x:Name="AllAppsTree" Grid.Column="2"/>
        </Grid-->
    <!--Grid Background="#FF000040" Margin="0,32">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="0"/>
            </Grid.ColumnDefinitions>
            <ListView x:Name="FileIconOverrides" Visibility="Hidden">
                <ListView.View>
                    <GridView>
                        <GridViewColumn DisplayMemberBinding="{Binding TargetName}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Tag="TargetName">Target File name</GridViewColumnHeader>
                            </GridViewColumn.Header>
                        </GridViewColumn>
                        <GridViewColumn DisplayMemberBinding="{Binding IsFullPath}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Tag="IsFullPath">Is full path</GridViewColumnHeader>
                            </GridViewColumn.Header>
                        </GridViewColumn>
                        <GridViewColumn>
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Tag="OriginalIcon">Original icon</GridViewColumnHeader>
                            </GridViewColumn.Header>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <ContentControl Content="{Binding TargetName, Converter={StaticResource ReplacementIconNameToOriginalCanvasConverter}}"/>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn>
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Tag="ReplacementBrush">Replacement icon</GridViewColumnHeader>
                            </GridViewColumn.Header>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <Canvas Width="48" Height="48" Background="{Binding ReplacementBrush}"/>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                    </GridView>
                </ListView.View>

            </ListView>
            <ToggleButton Style="{DynamicResource PlexGlowToggleButtonStyle}" Width="100" Height="40" Click="ToggleButton_Click">Test</ToggleButton>
            <Grid HorizontalAlignment="Left" Width="128" Height="128" VerticalAlignment="Bottom" Margin="64">
                <Grid Margin="2">
                    <Rectangle x:Name="PlexMaskSizingAid" Margin="0,-64"/>
                    <Border BorderBrush="#7F7BA3E5" BorderThickness="2" CornerRadius="6">
                        <Border.Effect>
                            <BlurEffect KernelType="Gaussian" Radius="2"/>
                        </Border.Effect>
                        <Border.OpacityMask>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Border Width="{Binding ActualWidth, Source={x:Reference PlexMaskSizingAid}}" Height="{Binding ActualHeight, Source={x:Reference PlexMaskSizingAid}}" BorderThickness="2" BorderBrush="Black" Background="Transparent" CornerRadius="10"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.OpacityMask>
                    </Border>
                    <Border BorderBrush="#FF9EC9F3" BorderThickness="1" CornerRadius="2" Margin="2">
                        <Border BorderBrush="#FF70B3E3" BorderThickness="1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Offset="0" Color="#FFA1D3F3"/>
                                        <GradientStop Offset="0.05" Color="#C07CC2F0"/>
                                        <GradientStop Offset="0.95" Color="#C07CC2F0"/>
                                        <GradientStop Offset="1" Color="#FFA1D3F3"/>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Grid>
                                <Canvas x:Name="RevealPlexDemoSizingAid"/>
                                <apictrl:Reveal HoverWidth="512" HoverHeight="512">
                                    <apictrl:Reveal.Hover>
                                        <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5">
                                            <RadialGradientBrush.GradientStops>
                                                <GradientStop Offset="0" Color="#FFEEFEFE"/>
                                                <GradientStop Offset="0.5" Color="#C076BDEF"/>
                                                <GradientStop Offset="0.75" Color="#C076BEEF"/>
                                                <GradientStop Offset="1" Color="#0076BEEF"/>
                                            </RadialGradientBrush.GradientStops>
                                        </RadialGradientBrush>
                                    </apictrl:Reveal.Hover>
                                    <apictrl:Reveal.OpacityMask>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <Border Width="{Binding ActualWidth, Source={x:Reference RevealPlexDemoSizingAid}}" Height="{Binding ActualHeight, Source={x:Reference RevealPlexDemoSizingAid}}" BorderThickness="1" BorderBrush="Black" Background="Transparent">
                                                    <Border BorderBrush="#C0000000" BorderThickness="1">
                                                        <Border BorderBrush="#7F000000" BorderThickness="1">
                                                            <Border BorderBrush="#40000000" BorderThickness="1"/>
                                                        </Border>
                                                    </Border>
                                                </Border>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </apictrl:Reveal.OpacityMask>
                                </apictrl:Reveal>
                                <TextBlock TextAlignment="Center" VerticalAlignment="Center" Foreground="White" TextWrapping="Wrap">Here, have a Plex Reveal demo.</TextBlock>
                            </Grid>
                        </Border>
                    </Border>
                </Grid>
            </Grid>
            <Grid HorizontalAlignment="Right" Width="256" Height="256" VerticalAlignment="Bottom" Margin="64" Background="Black">
                <Canvas x:Name="RevealDemoSizingAid"/>
                <apictrl:Reveal HoverWidth="1024" HoverHeight="1024">
                    <apictrl:Reveal.Hover>
                        <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Offset="0" Color="#7FFFFFFF"/>
                                <GradientStop Offset="1" Color="Transparent"/>
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </apictrl:Reveal.Hover>
                    <apictrl:Reveal.OpacityMask>
                        <VisualBrush>
                            <VisualBrush.Visual>
                                <Border Width="{Binding ActualWidth, Source={x:Reference RevealDemoSizingAid}}" Height="{Binding ActualHeight, Source={x:Reference RevealDemoSizingAid}}" BorderThickness="5" BorderBrush="Black" Background="Transparent"/>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </apictrl:Reveal.OpacityMask>
                </apictrl:Reveal>
                <TextBlock TextAlignment="Center" VerticalAlignment="Center" Foreground="White">Here, have a Fluent Reveal demo.</TextBlock>
            </Grid>
            <ListView x:Name="ProcessIconOverrides" Grid.Column="1">
                <ListViewItem>AAAA</ListViewItem>
            </ListView>
        </Grid-->
    <!--/plex:PlexWindow.Content-->
</plex:PlexWindow>